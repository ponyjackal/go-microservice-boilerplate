version: "3.8"

services:
  postgres_db:
    container_name: dev_pg_db
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=${MASTER_DB_USER}
      - POSTGRES_PASSWORD=${MASTER_DB_PASSWORD}
      - POSTGRES_DB=${MASTER_DB_NAME}
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:${MASTER_DB_PORT}
    networks:
      - db-net
    restart: always

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS:
        -Djava.security.auth.login.config=/etc/kafka/zookeeper_server_jaas.conf
        -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
        -Dzookeeper.allowSaslFailedClients=false
        -Dzookeeper.requireClientAuthScheme=sasl
    ports:
      - 22181:2181
    volumes:
      - ./pkg/config/kafka/zookeeper.sasl.jaas.config:/etc/kafka/zookeeper_server_jaas.conf
    networks:
      - kafka-net

  kafka:
    container_name: dev_kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_PLAINTEXT:SASL_PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SASL_MECHANISM: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
    volumes:
      - ./pkg/config/kafka/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
      - ./pkg/config/kafka/client.properties:/tmp/client.properties
    networks:
      - kafka-net

  opensearch-node: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node/)
    # image: opensearchproject/opensearch:latest
    container_name: opensearch-node
    build:
      context: .
      dockerfile: Dockerfile-opensearch
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node # Nodes eligibile to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch_data:/usr/share/opensearch/data # Creates volume called opensearch_data and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - opensearch-net

  minio:
    container_name: minio
    image: minio/minio
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
    networks:
      - minio-net
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  server:
    container_name: product_service_go
    build:
      context: .
      dockerfile: Dockerfile-dev
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - ${GRPC_SERVER_PORT}:${GRPC_SERVER_PORT}
    env_file:
      - .env
    depends_on:
      - postgres_db
      - kafka
      - opensearch-node
      - minio
    volumes:
      - .:/app
    networks:
      - opensearch-net
      - kafka-net
      - db-net
      - minio-net
      - grpc-net
    restart: always

volumes:
  dev_postgres_data:
  opensearch_data:
  minio_data:

networks:
  opensearch-net:
  kafka-net:
  db-net:
  minio-net:
  grpc-net:
    driver: bridge
